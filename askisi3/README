ΒΑΒΟΥΛΑΣ ΣΤΕΦΑΝΟΣ

Compile and Run
g++ -std=c++11 -o myprog main.cpp Object.cpp String.cpp PlaneComponent.cpp Plane.cpp Employee.cpp
./myprog

Πληροφορίες:
Object.h: Εδώ βρίσκεται ο ορισμός της κλάσης Object, η οποία αποτελεί μια αφηρημένη κλάση με 3 pure virtual συναρτήσεις, οι οποίες υλοποιούνται σε όλες τις υπόλοιπες (μη αφηρημένες) κλάσεις. Επιπλέον δηλώνεται η συνάρτηση clone_encrypt_and_print.

Object.cpp: Εδώ βρίσκεται υλοποίηση βασικών συναρτήσεων για την Object class καθώς και η υλοποίηση της clone_encrypt_and_print, η οποία γίνεται αποκλειστικά με χρήση των συναρτήσεων από τη δική μου κλαση String.

String.h: Ορισμός της κλασης String, που αποτελεί υποκλάση της Object.

String.cpp: Υλοποίηση των συναρτήσεων με χρήση της έτοιμης string της c++.
->Όσοn αφορά την συνάρτηση equal, όπως και σε όλες τις υπόλοιπες υποκλάσεις, χρησιμοποιώ dynamic cast και ελέγχω τα μέλη των εκάστοτε υποκλάσεων. Αν είναι ίσα, η συνάρτηση επιστρέφει τιμη true.
->Όσον αφορά την συνάρτηση clone, όπως και σε όλες τις υπόλοιπες υποκλάσεις, δημιουργώ νέο αντικείμενο της εκάστοτε υποκλάσης που παίρνει τις τιμές για τα μέλη του μέσω copy constructor. Εξαίρεση αποτελούν οι συναρτήσεις clone των κλάσεων που εμπεριέχουν δείκτες σε άλλα αντικείμενα(βλ. CargoBay, PassengerCompartment, Plane) στις οποίες επιπλεόν δεσμεύεται χώρος για τα νέα αντικείμενα ώστε να επιτευχθεί deep copy κατά τη χρήση της clone.
->Όσον αφορά την συνάρτηση toString, όπως και σε όλες τις υπόλοιπες υποκλάσεις, επιστρέφεται αντικείμενο της μορφής String, το οποίο εχεί ως μέλος ενωμένα τα μέλη της εκάστοτε υποκλάσης σε μια συμβοοσειρά.

PlaneComponent.h: Ορισμος κλάσεων PlaneComponent(abstract), PassengerCompartment, PrivateCompartment(abstract), EquipmentCompartment, CargoBay.
Οι μόνες προσαρμογές που έχω κάνει πέρα απο τα ζητούμενα της εκφώνησης, είναι
(1) ο ορισμος μεταβλητών που συμβολίζουν αν έχει ολοκληρωθεί η εργασία του κάθε υπαλλήλου στο συγκεκριμένο κομμάτι του αεροπλάνου(μάζι με 3 setter συναρτήσεις ώστε η τιμή τους να μετατρέπεται σε true από τις συναρτήσεις WorkOn των υπαλληλων)
(2) ο ορισμός μιας μεταβλητής InnerPComp στο Passenger Compartment, η οποία παίρνει τιμή απο τον constructor: true για να υπάρχει εσωτερικό Passenger Compartment μέσα στο αρχικό και false για να μην υπάρχει.
και 3) ο ορισμός της ready_check ως bool, για να είναι πιο χρήσιμη στο υπόλοιπο πρόγραμμα.

Plane.h: Ορισμός της κλάσης Plane. Και αυτή έχει την ready_check ως bool, και στην υλοποίηση εκτελεί την ready_check για κάθε κομμάτι του αεροπλάνου που περιέχει και επιστρέφει τιμή true μόνο αν σε όλα τα κομμάτια έχουν τελειώσει οι απαραίτητες εργασίες από τους υπαλλήλους. Επιπλέον έχω ορίσει μια μεταβλητή int N που κρατάει τον αριθμό των PassengerCompartments(ο οποίος και μπορεί να αλλάξει από τον constructor της Plane).

Employee.h: Ορισμός των κλάσεων Employee(abstract), SecurityEmployee, MaintenanceEmployee, CleaningEmployee.

-->Όσον αφορά τις συναρτήσεις process-WorkOn-Report:
Οι process στην κλάση Plane είναι overloaded συναρτήσεις με βάση τον εκάστοτε υπάλληλο. Αυτό γίνεται προκειμένου όπως αναφέρεται στην εκφώνηση ο κάθε υπάλληλος να δουλέψει μόνο στους χώρους όπου απαιτείται. Μέσω της εκάστοτε process του αεροπλάνου, οι υπάλληλοι "δίνονται" στο κάθε κομμάτι του αεροπλάνου που απαιτείται να δουλέψουν. Έκει καλείται η συνάρτηση WorkOn για κάθε υπάλληλο, η οποία θέτει την αντίστοιχη δουλεία (SecurityWorkDone, CleaningWorkDone, MaintenanceWorkDone) ως true. Στη συνέχεια καλέιται για τον κάθε υπάλληλο η συνάρτηση Report, όπου είναι πάλι overloaded στην κλάση Employee, ώστε να εκτυπώνει πάντα το σωστό μήνυμα ανάλογα με το κομμάτι του αεροπλάνου στο οποίο εργάζεται.
Επιπλέον, σε κομμάτια αεροπλάνου που περιέχουν μέσα τους άλλα κομμάτια αεροπλάνου(π.χ. το Equipment Compartment μεσα στο Cargo Bay και το εσωτερικό Passenger Compartment) στην process καλείται και process για αυτά τα εσωτερικά κομμάτια.
Όλα τα παραπάνω ελέγχονται για την επιτυχία τους μέσω των ready_check συναρτήσεων, οι οποίες επίσης ελέγχουν τα εσωτερικά κομμάτια για την ετοιμότητα τους, ενώ η ready_check του αεροπλάνου τις ελέγχει όλες καταλήγοντας με bool αποτέλεσμα για την ετοιμότητα του αεροπλάνου.

Τέλος σύμφωνα με τις σημειώσεις, έχω υλοποιήσει getters για όλα τα μέλη των κλάσεων, εκτός από αυτά που αποτελούν προσωπική μου υλοποίηση (βλ.(1)-(2) στην εξήγηση των περιεχομένων του αρχείου PlaneComponent.h), καθώς επίσης υπάρχουν constructors και destructors για όλες τις κλάσεις οι οποίες εκτός από τις εκάστοτε απαραίτητες εργασίες, εκτυπώνουν και μήνυμα σύμφωνα με τις οδηγίες της εκφώνησης.








